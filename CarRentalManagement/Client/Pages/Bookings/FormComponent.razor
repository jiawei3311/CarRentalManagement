@inject HttpClient _client
<EditForm Model="@booking" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled" >
    <div class="form-group">
        <label>Vehicle: </label>
        <div>
            <InputSelect @bind-Value="booking.VehicleId" class="form-control">
                <option value="">-- Select Vehicle --</option>
                @if (vehicles != null)
                {
                    foreach (var vehicle in vehicles)
                    {
                        <option value="@vehicle.Id">@vehicle.Make.Name @vehicle.Model.Name- @vehicle.LicensePlateNumber</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => booking.CustomerId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Customer: </label>
        <div>
            <InputSelect @bind-Value="booking.CustomerId" class="form-control">
                <option value="">-- Select Customer --</option>
                @if (customers != null)
                {
                    foreach (var customer in customers)
                    {
                        <option value="@customer.Id">@customer.FirstName- @customer.DrivingLicense</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => booking.CustomerId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Date Out: </label>
        <div>
            <InputDate @bind-Value="@booking.DateOut" class="form-control" />
            <ValidationMessage For="@(() => booking.DateOut)" />
        </div>
    </div>
    @if (booking.Id > 0)
    {
        <div class="form-group">
            <label>Date In: </label>
            <div>
                <InputDate @bind-Value="@booking.DateIn" class="form-control" />
                <ValidationMessage For="@(() => booking.DateIn)" />
            </div>
        </div>
    }
    
    </fieldset>
    <br />
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="bookings" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Booking? booking { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Vehicle>? vehicles;
    private IList<Customer>? customers;

    protected async override Task OnInitializedAsync()
    {
        vehicles = await _client.GetFromJsonAsync<List<Vehicle>>($"{Endpoints.VehiclesEndpoint}");
        customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }
}
